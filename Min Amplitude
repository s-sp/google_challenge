Given an Array A, find the minimum amplitude you can get after changing up to 3 elements. Amplitude is the range of the array (basically difference between largest and smallest element).

Example 1:

Input: [-1, 3, -1, 8, 5 4]
Output: 2
Explanation: we can change -1, -1, 8 to 3, 4 or 5
Example 2:

Input: [10, 10, 3, 4, 10]
Output: 0
Explanation: change 3 and 4 to 10

#include <iostream>
#include <climits>
using namespace std;

void findmaxputfront(int* a, int i, int j)
{
    if(j<=i)
        return;
    int max = INT_MIN, maxi;
    for(int k=i; k<=j; ++k)
    {
        if(a[k]>max)
        {
            max = a[k];
            maxi = k;
        }
    }
    a[maxi] = a[i];
    a[i] = max;
}

void findminputback(int* a, int i, int j)
{
    if(j<=i)
        return;
    int min = INT_MAX, mini;
    for(int k=i; k<=j; ++k)
    {
        if(a[k]<min)
        {
            min = a[k];
            mini = k;
        }
    }
    a[mini] = a[j];
    a[j] = min;
}

int main(void)
{
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
	int n;
	cin>>n;
	int a[n], o[4];
	for(int i=0; i<n; ++i)
	   cin>>a[i];
	if(n<5)
	    cout<<0<<'\n';
	else
	{
	    findmaxputfront(a, 0, n-1);
      findmaxputfront(a, 1, n-1);
      findmaxputfront(a, 2, n-1);
      findminputback(a, 3, n-1);
      findminputback(a, 3, n-2);
      findminputback(a, 3, n-3);
      o[0] = a[3]-a[n-1]; 
      o[1] = a[2]-a[n-2]; 
      o[2] = a[1]-a[n-3];
      o[3] = a[0]-a[n-4];
      findminputback(o, 0, 3);
      cout<<o[3]<<'\n';
	}
	return 0;
}
